---
- hosts: K8Cluster
  remote_user: ubuntu
  become: yes
  become_user: root
  become_method: sudo

  tasks:
        - debug: msg="Installing K8s on {{inventory_hostname}}"
        - name: "Forcing update on hostname"
          command: "hostnamectl set-hostname {{inventory_hostname}}"

        - name: "disable swap"
          command: swapoff -a

        - name: "Installing Docker"
          script: ./scripts/docker_install.sh

        - name: "Uploading daemon.json"
          copy:
                  src: ./config/docker/daemon.json
                  dest: /etc/docker/daemon.json

        - name: "Updating Network Configuration"
          script: ./scripts/net_config.sh

        - name: "restarting docker service"
          service:
            name: docker
            state: restarted

        - name: "Installing Kubelet Kubeadm Kubectl"
          script: ./scripts/kubeadm_install.sh


- name: configuring K8master 
  hosts: K8master
  remote_user: ubuntu
  tasks:
        - name: "Initializing kubeadm"
          command: sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=0.0.0.0

        - command: mkdir /home/ubuntu/.kube

        - command: sudo cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config

        - command: sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config

        - name: "Downloading Flannel"
          command: curl https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml -o /home/ubuntu/kube-flannel.yml
 
        - name: "Installing Flannel"
          command: kubectl apply -f /home/ubuntu/kube-flannel.yml

        - name: "testing if pod network is up"
          command: kubectl get pods --all-namespaces
          register: pod_net_test

        - debug: msg= "{{ pod_net_test.stdout }}"

        - name: Starting up private docker Registry
          command:  "sudo docker run -d -p {{hostvars[inventory_hostname]['internal_ip']}}:5000:5000 --restart=always --name registry -v /mnt/registry:/var/lib/registry registry:2"

        - name: "getting token"
          command: "kubeadm token create --print-join-command"
          register: join_cmd

        - name: "Untainting master to allow pod scheduling"
          command: "kubectl taint nodes --all node-role.kubernetes.io/master-"

        - name: "Checkout prometheus-operator Git repository"
          git:
            repo: 'https://github.com/coreos/prometheus-operator.git'
            dest: /home/ubuntu/prometheus-operator
        
        - name: "Install kube-prometheus - includues operator, node-exporter, grafana"
          command: "kubectl apply -f /home/ubuntu/prometheus-operator/contrib/kube-prometheus/manifests/"
        
        - pause:
            seconds: 2
        
        - name: "Re-Install kube-prometheus to avoid race-condition"
          command: "kubectl apply -f /home/ubuntu/prometheus-operator/contrib/kube-prometheus/manifests/"

        - name: "Pausing for prometheus containers to come up"
          pause:
            seconds: 10

        - name: "Exposing prometheus web UI"
          command: "kubectl expose -n monitoring service prometheus-k8s --type=NodePort --name prometheus-web-client"

        - name: "Exposing grafana web UI"
          command: "kubectl expose -n monitoring deployment grafana --type=NodePort --name monitoring-grafana-client"

        - debug: msg= "{{ join_cmd.stdout }} "

- hosts: K8nodes
  remote_user: ubuntu
  become: yes
  become_user: root
  become_method: sudo
  tasks:
         - debug: msg="Joining {{inventory_hostname}} to cluster"
         - command: "{{ hostvars['K8master']['join_cmd']['stdout'] }}"

- hosts: K8master
  remote_user: ubuntu
  become_user: root
  become_method: sudo
  tasks:
          - name: Downloading metric server from git
            git:
                  repo: "https://github.com/kubernetes-incubator/metrics-server.git"
                  dest: /tmp/metrics-server/
                  clone: yes
                  force: yes

          - name: Uploading metrics-server-deployment config file
            copy:
                    src: ./config/metrics-server-deployment.yaml
                    dest: /tmp/metrics-server/deploy/1.8+/
                    backup: no

          - name: installing metric server
            command: kubectl create -f ./deploy/1.8+/
            register: deploy_metric_server
            args:
                chdir: /tmp/metrics-server/

          - debug: msg="{{ deploy_metric_server.stdout }}"
          - debug: msg="{{ deploy_metric_server.stderr }}"
